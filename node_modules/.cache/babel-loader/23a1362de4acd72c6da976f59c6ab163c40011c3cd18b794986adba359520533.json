{"ast":null,"code":"var _jsxFileName = \"/Users/ethanh/Documents/FullStack Coursework/Block29_PuppyBowlReact/src/index.js\";\n// API/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nconst API_URL = 'https://fsa-puppy-bowl.herokuapp.com/api/2310-FSA-ET-WEB-PT-SF/players';\nconst fetchPlayers = async () => {\n  try {\n    const response = await fetch(API_URL);\n    const result = await response.json();\n\n    // Check if 'data.players' property exists and is an array\n    if (result && result.data && Array.isArray(result.data.players)) {\n      return result.data.players;\n    } else {\n      console.error('Invalid players data format:', result);\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching players:', error);\n    return [];\n  }\n};\nconst createPlayer = async newPlayer => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newPlayer)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating player:', error);\n    return null;\n  }\n};\nconst deletePlayer = async playerId => {\n  try {\n    const response = await fetch(`${API_URL}/${playerId}`, {\n      method: 'DELETE'\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error deleting player:', error);\n    return false;\n  }\n};\nexport { fetchPlayers, createPlayer, deletePlayer };","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","API_URL","fetchPlayers","response","fetch","result","json","data","Array","isArray","players","console","error","createPlayer","newPlayer","method","headers","body","JSON","stringify","deletePlayer","playerId","ok"],"sources":["/Users/ethanh/Documents/FullStack Coursework/Block29_PuppyBowlReact/src/index.js"],"sourcesContent":["// API/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; \nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nconst API_URL = 'https://fsa-puppy-bowl.herokuapp.com/api/2310-FSA-ET-WEB-PT-SF/players';\n\nconst fetchPlayers = async () => {\n    try {\n        const response = await fetch(API_URL);\n        const result = await response.json();\n\n        // Check if 'data.players' property exists and is an array\n        if (result && result.data && Array.isArray(result.data.players)) {\n            return result.data.players;\n        } else {\n            console.error('Invalid players data format:', result);\n            return [];\n        }\n    } catch (error) {\n        console.error('Error fetching players:', error);\n        return [];\n    }\n};\n\n\nconst createPlayer = async (newPlayer) => {\n    try {\n        const response = await fetch(API_URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newPlayer),\n        });\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error creating player:', error);\n        return null;\n    }\n};\n\nconst deletePlayer = async (playerId) => {\n    try {\n        const response = await fetch(`${API_URL}/${playerId}`, {\n            method: 'DELETE',\n        });\n        return response.ok;\n    } catch (error) {\n        console.error('Error deleting player:', error);\n        return false;\n    }\n};\n\nexport { fetchPlayers, createPlayer, deletePlayer };"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtBH,QAAQ,CAACI,MAAM,eACbD,OAAA,CAACJ,KAAK,CAACM,UAAU;EAAAC,QAAA,eACfH,OAAA,CAACF,GAAG;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CAAC,EACnBC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC;AAGD,MAAMC,OAAO,GAAG,wEAAwE;AAExF,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,CAAC;IACrC,MAAMI,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAEpC;IACA,IAAID,MAAM,IAAIA,MAAM,CAACE,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAACE,IAAI,CAACG,OAAO,CAAC,EAAE;MAC7D,OAAOL,MAAM,CAACE,IAAI,CAACG,OAAO;IAC9B,CAAC,MAAM;MACHC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEP,MAAM,CAAC;MACrD,OAAO,EAAE;IACb;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,EAAE;EACb;AACJ,CAAC;AAGD,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EACtC,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACH,OAAO,EAAE;MAClCc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS;IAClC,CAAC,CAAC;IACF,MAAMP,IAAI,GAAG,MAAMJ,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOC,IAAI;EACf,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACf;AACJ,CAAC;AAED,MAAMQ,YAAY,GAAG,MAAOC,QAAQ,IAAK;EACrC,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,IAAGoB,QAAS,EAAC,EAAE;MACnDN,MAAM,EAAE;IACZ,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAACmB,EAAE;EACtB,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,SAASV,YAAY,EAAEW,YAAY,EAAEO,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}